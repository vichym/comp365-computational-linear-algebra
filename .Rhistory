seq  = ggplot() + draw_image("seq.png") +  draw_label("Sequential", fontface='bold')
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
seq  = ggplot() + draw_image("seq.png") +   + labs(title = "Open MP")
seq  = ggplot() + draw_image("seq.png") +  labs(title = "Open MP")
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
seq  = ggplot() + draw_image("seq.png") +  labs(title = "Open MP") +  theme_void()
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
library(ggplot2)
library(cowplot)
library(magick)
require(egg)
seq  = ggplot() + draw_image("seq.png") +  labs(title = "Open MP") +  theme_void()
omp  = ggplot() + draw_image("omp.png") + labs(title = "Open MP")+  theme_void()
mc  = ggdraw() + draw_image("mc.png") + labs(title = "MultiCores")
gpu  = ggdraw() + draw_image("gpu.png") + labs(title = "GPU")
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
library(ggplot2)
library(cowplot)
library(magick)
require(egg)
seq  = ggdraw() + draw_image("seq.png")
omp  = ggdraw() + draw_image("omp.png")
mc  = ggdraw() + draw_image("mc.png")
gpu  = ggdraw() + draw_image("gpu.png")
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2, labels = c('Sequential', 'Open MP', 'MultiCores', 'GPU'))
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2, labels = c('Sequential', 'Open MP', 'MultiCores', 'GPU')) +
theme(plot.margin = margin(0.1,0.1,2,0.1, "cm"))
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2, labels = c('Sequential', 'Open MP', 'MultiCores', 'GPU')) +
theme(plot.margin = margin(4,0.1,2,0.1, "cm"))
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2, labels = c('Sequential', 'Open MP', 'MultiCores', 'GPU')) +
theme(plot.margin = margin(4,0.1,2,1, "cm"))
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2, labels = c('Sequential', 'Open MP', 'MultiCores', 'GPU')) +
theme(plot.margin = margin(4,4,4,4, "cm"))
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2, labels = c('Sequential', 'Open MP', 'MultiCores', 'GPU')) + plot.margin = margin(l = 15,r=10))
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2, labels = c('Sequential', 'Open MP', 'MultiCores', 'GPU')) + theme(axis.title.y = element_text(margin = margin (r = 10)),
#change the plot margins
plot.margin = margin(l = 15,r=10))
library(ggplot2)
library(cowplot)
library(magick)
require(egg)
seq  = ggplot() + draw_image("seq.png")  + labs(title = "Sequential") + theme_void()
omp  = ggplot() + draw_image("omp.png") + labs(title = "Open MP") + theme_void()
mc  = ggplot() + draw_image("mc.png") + labs(title = "MultiCores")+ theme_void()
gpu  = ggplot() + draw_image("gpu.png") + labs(title = "GPU") + theme_void()
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
seq  = ggplot() + draw_image("seq.png")  + labs(title = "Sequential") + theme_void()
omp  = ggplot() + draw_image("omp.png") + labs(title = "Open MP") + theme_void()
mc  = ggplot() + draw_image("mc.png") + labs(title = "MultiCores")+ theme_void()
gpu  = ggplot() + draw_image("gpu.png") + labs(title = "GPU") + theme_void()
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
seq  = ggdraw() + draw_image("seq.png")  + gg_label(title = "Sequential") + theme_void()
omp  = ggdraw() + draw_image("omp.png") + draw_label(title = "Open MP") + theme_void()
omp  = ggdraw() + draw_image("omp.png") + draw_label("Open MP") + theme_void()
omp
library(ggplot2)
library(cowplot)
library(magick)
require(egg)
seq  = ggplot() + draw_image("seq.png")  + labs(title = "Sequential")+ theme_void()
omp  = ggplot() + draw_image("omp.png") +labs(title = "Open MP")+ theme_void()
mc  = ggplot() + draw_image("mc.png") + labs(title = "MultiCores")+ theme_void()
gpu  = ggplot() + draw_image("gpu.png") + labs(title = "GPU") + theme_void()
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
# seq  = ggplot() + draw_image("seq.png")  + labs(title = "Sequential")+ theme_void()
# omp  = ggplot() + draw_image("omp.png") +labs(title = "Open MP")+ theme_void()
# mc  = ggplot() + draw_image("mc.png") + labs(title = "MultiCores")+ theme_void()
# gpu  = ggplot() + draw_image("gpu.png") + labs(title = "GPU") + theme_void()
seq
omp
mc
gpu
ggarrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
grid(seq, omp, mc , gpu, ncol=2, nrow = 2)
grid.arrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
library(gridExtra)
#### Visual Clue
The snapshot of last frame after the simulation give should the position of all  boids. Figure \ref{fig:accuracy_check} show the final rendering. All the four version seem to product similar final result for the same given input. This is a positive sign that suggests all version are producing accurate simulation result.
```{r accuracy_check, fig.cap="Final Frame after Running the Same Simulation"}
library(ggplot2)
library(cowplot)
library(magick)
library(gridExtra)
seq  = ggplot() + draw_image("seq.png")  + labs(title = "Sequential")+ theme_void()
omp  = ggplot() + draw_image("omp.png") +labs(title = "Open MP")+ theme_void()
mc  = ggplot() + draw_image("mc.png") + labs(title = "MultiCores")+ theme_void()
gpu  = ggplot() + draw_image("gpu.png") + labs(title = "GPU") + theme_void()
grid.arrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
```
compiler_test_1_raw <-
as.data.frame(
read_delim("../445s22/project-team2-boiiiiiiii/computational-beauty-of-nature-vichym-main/CBofN/bin/compiler_test_1.tsv",
escape_double = FALSE,
trim_ws = TRUE)) %>%
rename(trial = '#trial',
compiler = COMPILER)
head(compiler_test_1_raw)
knitr::kable(head(compiler_test_1_raw), caption = "The first 6 rows of the dataset, gapminder")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, tidy.opts = list(width.cutoff = 60), tidy = TRUE,fig.pos = 'H')
library(tidyverse)
library(ggplot2)
library(janitor)
library(scales)
library(readr)
library(ggplot2)
library(cowplot)
library(magick)
library(gridExtra)
seq  = ggplot() + draw_image("seq.png")  + labs(title = "Sequential")+ theme_void()
omp  = ggplot() + draw_image("omp.png") +labs(title = "Open MP")+ theme_void()
mc  = ggplot() + draw_image("mc.png") + labs(title = "MultiCores")+ theme_void()
gpu  = ggplot() + draw_image("gpu.png") + labs(title = "GPU") + theme_void()
grid.arrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
compiler_test_1_raw <-
as.data.frame(
read_delim("../445s22/project-team2-boiiiiiiii/computational-beauty-of-nature-vichym-main/CBofN/bin/compiler_test_1.tsv",
escape_double = FALSE,
trim_ws = TRUE)) %>%
rename(trial = '#trial',
compiler = COMPILER)
knitr::kable(head(compiler_test_1_raw), caption = "Compiler Test 1 Raw Data",  digits = 3)
compiler_test_2_raw <- as.data.frame(
read_delim("../445s22/project-team2-boiiiiiiii/computational-beauty-of-nature-vichym-main/CBofN/bin/compiler_test_2.tsv",
escape_double = FALSE,
trim_ws = TRUE)) %>%
rename(trial = '#trial',
compiler = COMPILER)
knitr::kable(head(compiler_test_2_raw), caption = "Compiler Test 2 Raw Data",  digits = 4)
weaktest.raw <- as.data.frame(
read_delim("../445s22/project-team2-boiiiiiiii/computational-beauty-of-nature-vichym-main/CBofN/bin/omp_mc_weak_test.tsv",
escape_double = FALSE,
trim_ws = TRUE)) %>%
rename(duration = time) %>%
clean_names()
knitr::kable(head(weaktest.raw), caption = "Weak Scalability Test Raw Data",  digits = 4)
alltest.raw<- as.data.frame(
read_delim("../445s22/project-team2-boiiiiiiii/computational-beauty-of-nature-vichym-main/CBofN/bin/all_version_performance_test_1.tsv",
escape_double = FALSE,
trim_ws = TRUE)) %>%
rename(trial = '#trial')
knitr::kable(head(weaktest.raw), caption = "Performance Tests of All Code Versions",  digits = 4)
compiler_test_1_result = compiler_test_1_raw %>%
pivot_longer(cols = -c(trial, compiler),
values_to = "duration",
names_to = "problem_size") %>%
mutate(problem_size = as.numeric(problem_size)) %>%
group_by(compiler, problem_size) %>%
summarize(duration = median(duration),
compiler = as.factor(compiler))
compiler_test_1_result %>%
ggplot(aes(x = problem_size,
y = duration,
color = compiler,
linetype = compiler)) +
geom_line( size = 1) +
scale_color_discrete(labels= c("GCC", "PGCC")) +
scale_x_continuous(breaks= seq(0,1000, by=100)) +
scale_y_continuous(breaks= seq(0, 30, by=5)) +
scale_linetype_discrete(labels= c("GCC", "PGCC")) +
labs(y = "Duration (sec)",
x = "Problem Size",
linetype= 'Compiler',
color= 'Compiler',
subtitle= 'By Vichearith Meas & Sivhuo Prak',
title= "Compiler Testing : Performance of Boid_seq.c")+
theme(legend.position = 'top',
axis.text.x = element_text(size=8,vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
compiler_test_2_result = compiler_test_2_raw %>%
pivot_longer(cols = -c(trial, compiler),
values_to = "duration",
names_to = "number_thread" ) %>%
mutate(number_thread = as.numeric(number_thread)) %>%
group_by(compiler, number_thread) %>%
summarize(duration = median(duration),
compiler = as.factor(compiler))
compiler_test_2_result %>%
ggplot(aes(x = number_thread,
y = duration,
color = compiler,
linetype = compiler)) +
geom_line( size = 1) +
scale_color_discrete(labels= c("GCC", "PGCC")) +
scale_linetype_discrete(labels= c("GCC", "PGCC")) +
scale_x_continuous(breaks= c(2,4,8,16)) +
scale_y_continuous(breaks= seq(0, 50, by=5)) +
labs(y = "Duration (sec)",
x = "Number of Thread",
linetype= 'Compiler',
color= 'Compiler',
subtitle= 'By Vichearith Meas & Sivhuo Prak',
title= "Compiler Testing: Performance of Boid_omp.c Simulating 1000 Boids 200 iteration")+
theme(legend.position = 'top',
axis.text.x = element_text(size=8,vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
weaktest.result = weaktest.raw %>%
mutate(init_size = case_when(
line  ==1  ~ 50,
line  ==2  ~ 100,
line  ==3  ~ 200,
line  ==4  ~ 400,
line  ==5  ~ 800),
program = case_when( program  == "./boids_omp_pgcc" ~ "Open MP",
program  == "./boids_mc" ~ "Multicore") )%>%
group_by( init_size, program, problem_size, threads) %>%
summarize(duration = median(duration))
weaktest.result %>%
ggplot(aes(x = threads, y = duration, color = as.factor(init_size))) +
geom_path(se=F, size = 1) +
geom_point(size = 1, color = "black") +
scale_x_continuous(breaks=c(2,4,8,16))+
scale_y_continuous(n.breaks = 10)+
facet_grid(~program) +
labs(title="Weak Scalability: Multicore vs Open MP",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Number of Thread",
y = 'Median Duration (sec)',
color='Initial Problem Size') +
theme(legend.position = 'top',
axis.text.x = element_text(size=9, vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
alltest.result=alltest.raw %>%
mutate(program = case_when(
program  == "./boids_gpu" ~ "GPU",
program  == "./boids_mc" ~ "Multicore",
program  == "./boids_omp_pgcc" ~ "Open MP",
program  == "./boids_seq_pgcc" ~ "Sequential")) %>%
mutate(duration = as.numeric(duration),
program = fct_relevel(program, c('Sequential', 'Open MP',"Multicore", "GPU"))) %>%
group_by(program, problem_size) %>%
summarize(duration = median(duration))
xx = c(100,200,400,800,1600,3200,6400,12800,25600,51200)
gpu.data = alltest.result %>% filter(program== 'GPU', !is.na(duration))
gpu.spline = splinefun(gpu.data$problem_size, gpu.data$duration, method="fmm")(xx)
omp.data = alltest.result %>% filter(program== 'Open MP', !is.na(duration))
omp.spline = splinefun(omp.data$problem_size,omp.data$duration,  method="fmm")(xx)
seq.data = alltest.result %>% filter(program== 'Sequential', !is.na(duration))
seq.spline = splinefun(seq.data$problem_size,seq.data$duration, method="fmm")(xx)
mc.data = alltest.result %>% filter(program== 'Multicore', !is.na(duration))
mc.spline = splinefun(mc.data$problem_size,mc.data$duration,method="fmm")(xx)
prediction = data.frame(problem_size = xx,
omp = omp.spline,
mc = mc.spline,
seq = seq.spline,
gpu = gpu.spline) %>%
pivot_longer(cols = -c(problem_size),
values_to = 'pred',
names_to = 'program') %>%
mutate(program = case_when(
program  == "gpu" ~ "GPU",
program  == "mc" ~ "Multicore",
program  == "omp" ~ "Open MP",
program  == "seq" ~ "Sequential")) %>%
inner_join(alltest.result) %>%
mutate(program = factor(program, levels = c("Sequential","Open MP", "Multicore", "GPU")))
alltest.result %>%
ggplot(aes(y = duration, x = problem_size, color = program)) +
scale_y_continuous()+
geom_point()+
stat_smooth( fullrange=TRUE) +
scale_color_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_x_continuous(breaks = c(0,100,200,400,800,1600,3200,6400,12800,25600,51200))+
labs(title="Performance Test",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Problem Size",
y = 'Median Duration (sec)',
fill='Code Version') +
theme(legend.position = 'top',
axis.text.x = element_text(size=6, vjust = 0.5, angle=90, family="serif"),
text=element_text(size=10,  family="serif") )
alltest.result %>%
mutate(duration = sqrt(duration)) %>%
ggplot(aes(y = duration, x = problem_size, color = program)) +
scale_y_continuous()+
geom_point()+
stat_smooth( fullrange=TRUE) +
scale_color_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_x_continuous(breaks = c(0,100,200,400,800,1600,3200,6400,12800,25600,51200))+
labs(title="Performance Test",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Problem Size",
y = 'Squart Root of Duration (sec)',
fill='Code Version') +
theme(legend.position = 'top',
axis.text.x = element_text(size=6, vjust = 0.5, angle=90, family="serif"),
text=element_text(size=10,  family="serif") )
prediction %>%
mutate(problem_size = as.factor(problem_size)) %>%
ggplot(aes(x = problem_size,
y = duration,
fill = program)) +
geom_col(position = "dodge", width = 0.5) +
geom_hline(yintercept = 1, size = 0.2)+
geom_line(aes(x = problem_size,
y = pred,
group = program,
color = program), size = 0.5) +
scale_x_discrete(breaks = c(100,200,400,800,1600,3200,6400,12800,25600,51200))+
labs(title="Projection of Duration on Log Scale",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Problem Size",
y = 'Median Duration (sec)',
fill='Code Version',
color='Code Version') +
scale_fill_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_color_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
annotation_logticks(sides = "l")+
theme(legend.position = 'top',
axis.text.x = element_text(size=6,vjust = 0.5,  family="serif"),
text=element_text(size=10,  family="serif") )
knitr::include_graphics(c("boids_orignal.png","boids_refactored.png"))
knitr::include_graphics(c("boids_orignal.png","boids_refactored.png"))
p1 = prediction %>%
mutate(problem_size = as.factor(problem_size)) %>%
ggplot(aes(x = problem_size,
y = duration,
fill = program)) +
geom_col(position = "dodge", width = 0.5) +
scale_x_discrete(breaks = c(100,200,400,800,1600,3200,6400,12800,25600,51200))+
labs(title="Fig 4:Conway's GoL: Code Version Comparision",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Problem Size",
y = 'Median Duration (sec)',
fill='Code Version',
color='Code Version') +
scale_fill_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_color_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
theme(legend.position = 'top',
axis.text.x = element_text(size=9,vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
p1
grid.arrange(seq, omp, mc , gpu, ncol=2, nrow = 2)
knitr::kable(head(compiler_test_1_raw), caption = "Compiler Test 1 Raw Data",  digits = 3)
compiler_test_1_result = compiler_test_1_raw %>%
pivot_longer(cols = -c(trial, compiler),
values_to = "duration",
names_to = "problem_size") %>%
mutate(problem_size = as.numeric(problem_size)) %>%
group_by(compiler, problem_size) %>%
summarize(duration = median(duration),
compiler = as.factor(compiler))
compiler_test_1_result %>%
ggplot(aes(x = problem_size,
y = duration,
color = compiler,
linetype = compiler)) +
geom_line( size = 1) +
scale_color_discrete(labels= c("GCC", "PGCC")) +
scale_x_continuous(breaks= seq(0,1000, by=100)) +
scale_y_continuous(breaks= seq(0, 30, by=5)) +
scale_linetype_discrete(labels= c("GCC", "PGCC")) +
labs(y = "Duration (sec)",
x = "Problem Size",
linetype= 'Compiler',
color= 'Compiler',
subtitle= 'By Vichearith Meas & Sivhuo Prak',
title= "Compiler Testing : Performance of Boid_seq.c")+
theme(legend.position = 'top',
axis.text.x = element_text(size=8,vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
compiler_test_1_result %>%
ggplot(aes(x = problem_size,
y = duration,
color = compiler,
linetype = compiler)) +
geom_line( size = 1) +
scale_color_discrete(labels= c("GCC", "PGCC")) +
scale_x_continuous(breaks= seq(0,1000, by=100)) +
scale_y_continuous(breaks= seq(0, 30, by=5)) +
scale_linetype_discrete(labels= c("GCC", "PGCC")) +
labs(y = "Duration (sec)",
x = "Problem Size",
linetype= 'Compiler',
color= 'Compiler',
subtitle= 'By Vichearith Meas & Sivhuo Prak',
title= "Compiler Testing : Performance of Boid_seq.c")+
theme(legend.position = 'top',
axis.text.x = element_text(size=8,vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
compiler_test_2_result = compiler_test_2_raw %>%
pivot_longer(cols = -c(trial, compiler),
values_to = "duration",
names_to = "number_thread" ) %>%
mutate(number_thread = as.numeric(number_thread)) %>%
group_by(compiler, number_thread) %>%
summarize(duration = median(duration),
compiler = as.factor(compiler))
compiler_test_2_result %>%
ggplot(aes(x = number_thread,
y = duration,
color = compiler,
linetype = compiler)) +
geom_line( size = 1) +
scale_color_discrete(labels= c("GCC", "PGCC")) +
scale_linetype_discrete(labels= c("GCC", "PGCC")) +
scale_x_continuous(breaks= c(2,4,8,16)) +
scale_y_continuous(breaks= seq(0, 50, by=5)) +
labs(y = "Duration (sec)",
x = "Number of Thread",
linetype= 'Compiler',
color= 'Compiler',
subtitle= 'By Vichearith Meas & Sivhuo Prak',
title= "Compiler Testing: Performance of Boid_omp.c Simulating 1000 Boids 200 iteration")+
theme(legend.position = 'top',
axis.text.x = element_text(size=8,vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
weaktest.result %>%
ggplot(aes(x = threads, y = duration, color = as.factor(init_size))) +
geom_path(se=F, size = 1) +
geom_point(size = 1, color = "black") +
scale_x_continuous(breaks=c(2,4,8,16))+
scale_y_continuous(n.breaks = 10)+
facet_grid(~program) +
labs(title="Weak Scalability: Multicore vs Open MP",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Number of Thread",
y = 'Median Duration (sec)',
color='Initial Problem Size') +
theme(legend.position = 'top',
axis.text.x = element_text(size=9, vjust = 0.5, family="serif"),
text=element_text(size=10,  family="serif") )
alltest.result %>%
ggplot(aes(y = duration, x = problem_size, color = program)) +
scale_y_continuous()+
geom_point()+
stat_smooth( fullrange=TRUE) +
scale_color_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_x_continuous(breaks = c(0,100,200,400,800,1600,3200,6400,12800,25600,51200))+
labs(title="Performance Test",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Problem Size",
y = 'Median Duration (sec)',
fill='Code Version') +
theme(legend.position = 'top',
axis.text.x = element_text(size=6, vjust = 0.5, angle=90, family="serif"),
text=element_text(size=10,  family="serif") )
alltest.result %>%
mutate(duration = sqrt(duration)) %>%
ggplot(aes(y = duration, x = problem_size, color = program)) +
scale_y_continuous()+
geom_point()+
stat_smooth( fullrange=TRUE) +
scale_color_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_x_continuous(breaks = c(0,100,200,400,800,1600,3200,6400,12800,25600,51200))+
labs(title="Performance Test",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Problem Size",
y = 'Squart Root of Duration (sec)',
fill='Code Version') +
theme(legend.position = 'top',
axis.text.x = element_text(size=6, vjust = 0.5, angle=90, family="serif"),
text=element_text(size=10,  family="serif") )
prediction %>%
mutate(problem_size = as.factor(problem_size)) %>%
ggplot(aes(x = problem_size,
y = duration,
fill = program)) +
geom_col(position = "dodge", width = 0.5) +
geom_hline(yintercept = 1, size = 0.2)+
geom_line(aes(x = problem_size,
y = pred,
group = program,
color = program), size = 0.5) +
scale_x_discrete(breaks = c(100,200,400,800,1600,3200,6400,12800,25600,51200))+
labs(title="Projection of Duration on Log Scale",
subtitle = 'By Vichearith Meas & Sivhuo Prak',
x = "Problem Size",
y = 'Median Duration (sec)',
fill='Code Version',
color='Code Version') +
scale_fill_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_color_manual(values = c("Sequential" = "dodgerblue2",
"Open MP"="green3",
"Multicore"="orange3",
"GPU"="orangered3"))+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
annotation_logticks(sides = "l")+
theme(legend.position = 'top',
axis.text.x = element_text(size=6,vjust = 0.5,  family="serif"),
text=element_text(size=10,  family="serif") )
p1
