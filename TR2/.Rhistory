new <- dat %>% filter(Visitor == "Pittsburgh Penguins" & Home == "Tampa Bay Lightning")
new
new <- dat %>% filter(Visitor == "Pittsburgh Penguins" & Home == "Tampa Bay Lightning")
new2 <- dat %>% filter(Home == "Pittsburgh Penguins" & Visitor == "Tampa Bay Lightning")
new
new2
data <- as.data.frame(read.csv('/content/nhl2122.csv')) %>%
clean_names() %>%
rename(visitor_score = g, home_score = g_1) %>%
select(-c(x, att, log, notes, date))
data <- as.data.frame(read.csv('nhl2122.csv')) %>%
clean_names() %>%
rename(visitor_score = g, home_score = g_1) %>%
select(-c(x, att, log, notes, date))
library(janitor)
data <- as.data.frame(read.csv('nhl2122.csv')) %>%
clean_names() %>%
rename(visitor_score = g, home_score = g_1) %>%
select(-c(x, att, log, notes, date))
# team vector for index sorted in aphabetically order
teams <- sort(union(unique(data$visitor), unique(data$home)))
# calculate score
data %>% mutate(s_ij = visitor_score/(visitor_score + home_score),
s_ji = home_score/(visitor_score + home_score))
# calculate score
data %>% mutate(s_ij = visitor_score/(visitor_score + home_score),
s_ji = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home)
# calculate score
data %>% mutate(s_ij = visitor_score/(visitor_score + home_score),
s_ji = home_score/(visitor_score + home_score)) %>%
arrange(visitor, home)
# calculate score
data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarise(s_visitor = sum(s_visitor), s_home = sum(s_visitor))
data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home)
# calculate score
data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor = sum(s_visitor) , s_home = sum(s_visitor))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor = sum(s_visitor) , s_home = sum(s_visitor)))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_visitor)))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_visitor)) %>%
arrange(visitor, home))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
mutate(s_visitor_sum_ratio = s_visitor_sum/sum(s_visitor_sum, s_home_sum) , s_home_sum_ratio = s_home_sum/sum(s_visitor_sum, s_home_sum)) %>%
arrange(visitor, home))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
arrange(visitor, home))
clear
clean()
clear()
3/5
2/5
5/13
8/13
# calculate score
(data %>%
group_by(visitor, home) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
mutate(s_visitor_sum_ratio = s_visitor_sum/sum(s_visitor_sum, s_home_sum) , s_home_sum_ratio = s_home_sum/sum(s_visitor_sum, s_home_sum)) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home), s_sum = sum(s_visitor_sum, s_home_sum)) %>%
mutate(s_visitor_sum_ratio = s_visitor_sum/s_sum , s_home_sum_ratio = s_home_sum/s_sum) %>%
arrange(visitor, home))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
arrange(visitor, home))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
mutate(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
mutate(s_sum = sum(s_visitor_sum, s_home_sum)) %>%
mutate(s_visitor_sum_ratio = s_visitor_sum/s_sum , s_home_sum_ratio = s_home_sum/s_sum) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarize(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
mutate(s_sum = sum(s_visitor_sum, s_home_sum)) %>%
mutate(s_visitor_sum_ratio = s_visitor_sum/s_sum , s_home_sum_ratio = s_home_sum/s_sum) %>%
arrange(visitor, home))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarize(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
arrange(visitor, home))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarize(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
mutate(s_visitor_ratio = s_visitor_sum/(s_visitor_sum + s_home_sum) , s_home_ratio = s_home_sum/(s_visitor_sum + s_home_sum)) %>%
arrange(visitor, home))
) %>%
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarize(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
mutate(s_vistor = s_visitor_sum/(s_visitor_sum + s_home_sum) , s_home = s_home_sum/(s_visitor_sum + s_home_sum)) %>%
arrange(visitor, home))
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarize(s_visitor_sum = sum(s_visitor) , s_home_sum = sum(s_home)) %>%
mutate(s_vistor = s_visitor_sum/(s_visitor_sum + s_home_sum) , s_home = s_home_sum/(s_visitor_sum + s_home_sum)) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%
mutate(s_vistor = s_visitor/(s_visitor_sum + s_home) , s_home = s_home/(s_visitor_sum + s_home_sum)) %>%
arrange(visitor, home))
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),
s_home = home_score/(visitor_score + home_score)) %>%
group_by(visitor, home) %>%
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%
mutate(s_vistor = s_visitor/(s_visitor_sum + s_home) , s_home = s_home/(s_visitor + s_home)) %>%
arrange(visitor, home))
mutate(s_vistor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
# calculate score
(data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),  # calculate s_ij
s_home = home_score/(visitor_score + home_score)) %>%     # calculate s_ji
group_by(visitor, home) %>%                                            # group to collapse the multiple games by (visitor vs home)
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%      # sum to between  multiple games by (visitor vs home)
mutate(s_vistor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
# calculate score
data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),  # calculate s_ij
s_home = home_score/(visitor_score + home_score)) %>%     # calculate s_ji
group_by(visitor, home) %>%                                            # group to collapse the multiple games by (visitor vs home)
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%      # sum to between  multiple games by (visitor vs home)
mutate(s_vistor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
# calculate score
data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),  # calculate s_ij
s_home = home_score/(visitor_score + home_score)) %>%     # calculate s_ji
group_by(visitor, home) %>%                                            # group to collapse the multiple games by (visitor vs home)
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%      # sum to between  multiple games by (visitor vs home)
mutate(s_visitor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
mat <-  matrix(nrow=length(teams), ncol = length(teams))
for (i in names(teams)){
for(j in names(teams)){
new <- dat %>% filter(Visitor == i & Home == j)
new2 <- dat %>% filter(Visitor==j & Home==i)
mat[teams[[i]],teams[[j]]] <- (sum(new$S_ij)+sum(new2$S_ji))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
mat[teams[[j]],teams[[i]]] <- (sum(new$S_ji)++sum(new2$S_ij))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
}
print(i)
}
mat[is.na(mat)] <- 1
mat
mat <-  matrix(nrow=length(teams), ncol = length(teams))
for (i in names(teams)){
for(j in names(teams)){
new <- dat %>% filter(Visitor == i & Home == j)
new2 <- dat %>% filter(Visitor==j & Home==i)
mat[teams[[i]],teams[[j]]] <- (sum(new$S_ij)+sum(new2$S_ji))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
mat[teams[[j]],teams[[i]]] <- (sum(new$S_ji)++sum(new2$S_ij))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
}
print(i)
}
mat[is.na(mat)] <- 1
mat
teams.2 <- read.csv("teams-2.csv", header=FALSE)
teams.2
teams
teams
dat
teams
mat
mat <-  matrix(nrow=length(teams), ncol = length(teams))
for (i in names(teams)){
for(j in names(teams)){
new <- dat %>% filter(Visitor == i & Home == j)
new2 <- dat %>% filter(Visitor==j & Home==i)
mat[teams[[i]],teams[[j]]] <- (sum(new$S_ij)+sum(new2$S_ji))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
mat[teams[[j]],teams[[i]]] <- (sum(new$S_ji)++sum(new2$S_ij))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
}
print(i)
}
mat[is.na(mat)] <- 1
mat <-  matrix(nrow=length(teams), ncol = length(teams))
for (i in names(teams)){
for(j in names(teams)){
new <- dat %>% filter(Visitor == i & Home == j)
new2 <- dat %>% filter(Visitor==j & Home==i)
mat[teams[[i]],teams[[j]]] <- (sum(new$S_ij)+sum(new2$S_ji))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
mat[teams[[j]],teams[[i]]] <- (sum(new$S_ji)++sum(new2$S_ij))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
}
print(i)
}
mat[is.na(mat)] <- 1
library(dplyr)
library(janitor)
source("https://www.macalester.edu/~dshuman1/365/365Functions.r")
dat <- read.csv("nhl2122.csv")
teams.2 <- read.csv("teams-2.csv", header=FALSE)
teams <- c()
teams <- 1:length(unique(dat$Visitor))
names(teams) <- teams.2$V1
dat <- dat %>% mutate(S_ij = G/(G+G.1)) %>% mutate(S_ji = G.1/(G+G.1))
teams
teams.2 <- read.csv("teams-2.csv", header=FALSE)
teams <- c()
teams <- 1:length(unique(dat$Visitor))
names(teams) <- teams.2$V1
dat <- dat %>% mutate(S_ij = G/(G+G.1)) %>% mutate(S_ji = G.1/(G+G.1))
teams
mat <-  matrix(nrow=length(teams), ncol = length(teams))
for (i in names(teams)){
for(j in names(teams)){
new <- dat %>% filter(Visitor == i & Home == j)
new2 <- dat %>% filter(Visitor==j & Home==i)
mat[teams[[i]],teams[[j]]] <- (sum(new$S_ij)+sum(new2$S_ji))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
mat[teams[[j]],teams[[i]]] <- (sum(new$S_ji)++sum(new2$S_ij))/(sum(new$S_ij)+sum(new$S_ji)+sum(new2$S_ij)+sum(new2$S_ji))
}
print(i)
}
mat[is.na(mat)] <- 1
mat
```{r}
A = diag(1, nrow= nrow(data))
```
```{r}
A = diag(1, nrow= nrow(data))
```
```{r}
data <- as.data.frame(read.csv('nhl2122.csv')) %>%
clean_names() %>%
rename(visitor_score = g, home_score = g_1) %>%
select(-c(x, att, log, notes, date))
# team vector for index sorted in aphabetically order
teams <- sort(union(unique(data$visitor), unique(data$home)))
```
```{r}
# calculate score
data_sum data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),  # calculate s_ij
s_home = home_score/(visitor_score + home_score)) %>%     # calculate s_ji
group_by(visitor, home) %>%                                            # group to collapse the multiple games by (visitor vs home)
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%      # sum to between  multiple games by (visitor vs home)
mutate(s_visitor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
```{r}
data <- as.data.frame(read.csv('nhl2122.csv')) %>%
clean_names() %>%
rename(visitor_score = g, home_score = g_1) %>%
select(-c(x, att, log, notes, date))
# team vector for index sorted in aphabetically order
teams <- sort(union(unique(data$visitor), unique(data$home)))
```
```{r}
# calculate score
data_sum = data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),  # calculate s_ij
s_home = home_score/(visitor_score + home_score)) %>%     # calculate s_ji
group_by(visitor, home) %>%                                            # group to collapse the multiple games by (visitor vs home)
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%      # sum to between  multiple games by (visitor vs home)
mutate(s_visitor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
# calculate score
data_sum = data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),  # calculate s_ij
s_home = home_score/(visitor_score + home_score)) %>%     # calculate s_ji
group_by(visitor, home) %>%                                            # group to collapse the multiple games by (visitor vs home)
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%      # sum to between  multiple games by (visitor vs home)
mutate(s_visitor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
A = diag(1, nrow= nrow(data))
A
A = diag(1, nrow= 3)
A
nrow(data_sum)
data
length(teams)
A = diag(1, nrow= length(teams))
A
data_sum
data_summary
data_summary
```{r}
data_summary = data %>% summarise(
win = ifelse(visitor_score > home_score, visitor, home),
lose = ifelse(visitor_score < home_score, visitor, home),
score = abs(visitor_score - home_score))%>%
pivot_longer(cols=c(win, lose), values_to = 'names', names_to = 'result') %>%
mutate(result = as.factor(result))%>%
group_by(names, result) %>%
summarise(diff_by_total = sum(score), count = n()) %>%
pivot_wider(
id_cols = names,
names_from = result,
values_from = c(diff_by_total, count)) %>%
mutate( balance_score = diff_by_total_win - diff_by_total_lose,
total_game_count = sum(count_lose, count_win),
colley_b_vector = 1 + 0.5*(count_win - count_lose)) %>%
arrange(names)
library(tidyverse)
data_summary = data %>% summarise(
win = ifelse(visitor_score > home_score, visitor, home),
lose = ifelse(visitor_score < home_score, visitor, home),
score = abs(visitor_score - home_score))%>%
pivot_longer(cols=c(win, lose), values_to = 'names', names_to = 'result') %>%
mutate(result = as.factor(result))%>%
group_by(names, result) %>%
summarise(diff_by_total = sum(score), count = n()) %>%
pivot_wider(
id_cols = names,
names_from = result,
values_from = c(diff_by_total, count)) %>%
mutate( balance_score = diff_by_total_win - diff_by_total_lose,
total_game_count = sum(count_lose, count_win),
colley_b_vector = 1 + 0.5*(count_win - count_lose)) %>%
arrange(names)
data_summary
INDEXOF = function ( s ) {match(s, data_summary$names)}
A
INDEXOF = function ( s ) {match(s, data_summary$names)}
A = diag(1, nrow= length(teams))
for(i in 1:nrow(data_sum)){
A[INDEXOF(data_sum$visitor[i]), INDEXOF(data_sum$home[i])] = data_sum$s_visitor[i]
A[INDEXOF(data_sum$visitor[i]), INDEXOF(data_sum$home[i])] = data_sum$s_home[i]
}
A
E <- eigen(mat)
E
data_summary = data %>% summarise(
win = ifelse(visitor_score > home_score, visitor, home),
lose = ifelse(visitor_score < home_score, visitor, home),
score = abs(visitor_score - home_score))%>%
pivot_longer(cols=c(win, lose), values_to = 'names', names_to = 'result') %>%
mutate(result = as.factor(result))%>%
group_by(names, result) %>%
summarise(diff_by_total = sum(score), count = n()) %>%
pivot_wider(
id_cols = names,
names_from = result,
values_from = c(diff_by_total, count)) %>%
mutate( balance_score = diff_by_total_win - diff_by_total_lose,
total_game_count = sum(count_lose, count_win),
colley_b_vector = 1 + 0.5*(count_win - count_lose)) %>%
arrange(names)
data_summary
data_summary = data %>% summarise(
win = ifelse(visitor_score > home_score, visitor, home),
lose = ifelse(visitor_score < home_score, visitor, home),
score = abs(visitor_score - home_score))%>%
pivot_longer(cols=c(win, lose), values_to = 'names', names_to = 'result') %>%
mutate(result = as.factor(result))%>%
group_by(names, result) %>%
summarise(diff_by_total = sum(score), count = n()) %>%
pivot_wider(
id_cols = names,
names_from = result,
values_from = c(diff_by_total, count)) %>%
mutate( balance_score = diff_by_total_win - diff_by_total_lose,
total_game_count = sum(count_lose, count_win))) %>%
data_summary = data %>% summarise(
win = ifelse(visitor_score > home_score, visitor, home),
lose = ifelse(visitor_score < home_score, visitor, home),
score = abs(visitor_score - home_score))%>%
pivot_longer(cols=c(win, lose), values_to = 'names', names_to = 'result') %>%
mutate(result = as.factor(result))%>%
group_by(names, result) %>%
summarise(diff_by_total = sum(score), count = n()) %>%
pivot_wider(
id_cols = names,
names_from = result,
values_from = c(diff_by_total, count)) %>%
mutate( balance_score = diff_by_total_win - diff_by_total_lose,
total_game_count = sum(count_lose, count_win)) %>%
arrange(names)
data_summary
# calculate score
data_sum = data %>% mutate(s_visitor = visitor_score/(visitor_score + home_score),  # calculate s_ij
s_home = home_score/(visitor_score + home_score)) %>%     # calculate s_ji
group_by(visitor, home) %>%                                            # group to collapse the multiple games by (visitor vs home)
summarize(s_visitor = sum(s_visitor) , s_home = sum(s_home)) %>%      # sum to between  multiple games by (visitor vs home)
mutate(s_visitor = s_visitor/(s_visitor + s_home) , s_home = s_home/(s_visitor + s_home)) # get the a new ration from all multiple games
data_sum
INDEXOF = function ( s ) {match(s, data_summary$names)}
A = diag(1, nrow= length(teams))
for(i in 1:nrow(data_sum)){
A[INDEXOF(data_sum$visitor[i]), INDEXOF(data_sum$home[i])] = data_sum$s_visitor[i]
A[INDEXOF(data_sum$home[i]), INDEXOF(data_sum$visitor[i])] = data_sum$s_home[i]
}
A
A.eigen = eigen(A)
A.lambda = A.eigen$values[1]
A.eigenvector = A.eigen$vectors[,1]
A.eigenvector
A.lambda
A.eigen
A.eigenvector
A.eigen = eigen(A)
A.lambda = as.numeric(A.eigen$values[1])
A.eigenvector =as.numeric( A.eigen$vectors[,1])
A.lambda
A.eigenvector
mat2 <- mat-diag(1,32,32)
E <- eigen(mat)
lambda <- E$values[1]
v <- E$vectors[,1]
vnorm(v,p="I")
v <- as.numeric(v)
names(v) <- names(teams)
which(v == min(v))
E2 <- eigen(mat2)
lambda2 <- E2$values[1]
v2 <- E2$vectors[,1]
v2 <- as.numeric(v2)
names(v2) <- names(teams)
which(v2 == max(v2))
eigen_ranking <- cbind(names(sort(v,decreasing = TRUE)),sort(v,decreasing = TRUE))
eigen_ranking <- data.frame(eigen_ranking)
colnames(eigen_ranking) <- c("Team","Value")
lambda
A.lambda
A.eigenvector
v2
v
which(v == min(v))
E <- eigen(mat)
lambda <- E$values[1]
v <- E$vectors[,1]
vnorm(v,p="I")
v <- as.numeric(v)
names(v) <- names(teams)
which(v == min(v))
names(v)
names(v) <- names(teams)
which(v == min(v))
v
v
INDEXOF = function ( s ) {match(s, data_summary$names)}
A = diag(1, nrow= length(teams))
for(i in 1:nrow(data_sum)){
new_sum_s_visitor = A[INDEXOF(data_sum$visitor[i]), INDEXOF(data_sum$home[i])]  + data_sum$s_visitor[i]
new_sum_s_home = A[INDEXOF(data_sum$home[i]), INDEXOF(data_sum$visitor[i])] + data_sum$s_home[i]
total_sum = data_sum$s_visitor[i] + data_sum$s_home[i] + current_i + current_j
A[INDEXOF(data_sum$visitor[i]), INDEXOF(data_sum$home[i])] = new_sum_s_visitor/total_sum
A[INDEXOF(data_sum$home[i]), INDEXOF(data_sum$visitor[i])] = new_sum_s_home/total_sum
}
INDEXOF = function ( s ) {match(s, data_summary$names)}
A = diag(1, nrow= length(teams))
for(i in 1:nrow(data_sum)){
new_sum_s_visitor = A[INDEXOF(data_sum$visitor[i]), INDEXOF(data_sum$home[i])]  + data_sum$s_visitor[i]
new_sum_s_home = A[INDEXOF(data_sum$home[i]), INDEXOF(data_sum$visitor[i])] + data_sum$s_home[i]
total_sum =new_sum_s_home + new_sum_s_visitor
A[INDEXOF(data_sum$visitor[i]), INDEXOF(data_sum$home[i])] = new_sum_s_visitor/total_sum
A[INDEXOF(data_sum$home[i]), INDEXOF(data_sum$visitor[i])] = new_sum_s_home/total_sum
}
A
A.eigen = eigen(A)
A.lambda = as.numeric(A.eigen$values[1])
A.eigenvector =as.numeric( A.eigen$vectors[,1])
A.eigenvector
A.lambda
A.eigenvector
eigen_result = data_summary %>%
select(names) %>%
mutate(eigen_ranking = A.eigenvector)
eigen_result = data_summary %>%
select(names) %>%
mutate(eigen_ranking = as.matrix(A.eigenvector))
eigen_result =  data.frame(colley_ranking = as.matrix(colley_ranking_vector)) %>%
mutate(names = data_summary$names)
eigen_result =  data.frame(colley_ranking = as.matrix(A.eigenvector)) %>%
mutate(names = data_summary$names)
eigen_result
